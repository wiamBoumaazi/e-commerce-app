version: '3'
services:
  # redis:
  #   image : redis:5.0.4
  #   ports:
  #     - "6379:6379"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #   networks:
  #     - webnet
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - webnet
  # mongodb:
  #   image: mongo
  #   ports:
  #     - "27017:27017"
  #   networks:
  #     - webnet
  kafka:
    image : wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - webnet
networks:
  webnet:

# version: '3.7'
# services:
#   redis:
#     image : redis:5.0.4
#     ports:
#       - "6379:6379"
#     deploy:
#       placement:
#         constraints: [node.role == manager]
#     command: redis-server --appendonly yes
#     networks:
#       - webnet
#   mongodb:
#     image: mongo
#     ports:
#       - "27017:27017"
#     networks:
#       - webnet
#   gateway:
#     image: backend/gateway
#     ports:
#       - "4001:4001"
#     deploy: 
#       replicas: 1
#     networks: 
#       - webnet
#     environment: 
#       - FRONT_END_HOST=http://frontend:3000
#       - AUTH_SERVICE_HOST=HTTP://authService:4000
#       - WEBSOCKET_HOST=http://websocket:4008/websocket
#       - KAFKA_HOST=http://kafka:5000
#       - INVENTORY_HOST=http://inventory:4003
#       - NOTIFICATION_HOST=http://notification://4009
#       - TRANSACTION_SERVICE_HOST=http://transactionService://4002
#   frontend:
#     image : frontend/market-app
#     ports:
#       - "3000:3000"
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: on-failure
#     networks:
#       - webnet
#   websocket:
#     image : backend/websocket-market
#     depends_on:
#       - redis
#     ports:
#       - "4008:4008"
#     deploy:
#       replicas: 2
#       restart_policy:
#         condition: on-failure
#     networks:
#       - webnet
#     environment:
#       - REDIS_HOST=redis
#   inventory:
#     image : backend/inventory-market
#     depends_on:
#       - mongodb
#     ports:
#       - "4003:4003"
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: on-failure
#     networks:
#       - webnet
#     environment:
#       - MONGO_HOST=mongodb://mongodb:27017
#   kafka:
#     image : backend/kafka-market
#     depends_on:
#       - mongodb
#     ports:
#       - "5000:5000"
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: on-failure
#     networks:
#       - webnet
#   notification:
#     image : backend/notification-market
#     depends_on:
#       - redis
#     ports:
#       - "4009:4009"
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: on-failure
#     networks:
#       - webnet
#     environment:
#       - REDIS_HOST=redis
#   transactionService:
#     image : backend/transactionService-market
#     depends_on:
#       - mongodb
#     ports:
#       - "4002:4002"
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: on-failure
#     networks:
#       - webnet
#     environment:
#       - MONGO_HOST=mongodb://mongodb:27017
# networks:
#   webnet:
#   visualizer:
#     image: dockersamples/visualizer:stable
#     ports:
#       - "8080:8080"
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock"
#     deploy:
#       placement:
#         constraints: [node.role == manager]
#     networks:
#       - webnet
# networks:
#   webnet: 